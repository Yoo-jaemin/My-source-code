Version 3.2 HI-TECH Software Intermediate Code
"17 filter.h
[s S1 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 ]
[n S1 . _err_measure _err_estimate _q_process _current_estimate _last_estimate _kalman_gain ]
"14 filter.c
[c E117 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .. ]
[n E117 . LEVEL_1 LEVEL_2 LEVEL_3 LEVEL_4 LEVEL_5 LEVEL_6 LEVEL_7 LEVEL_8 LEVEL_9 LEVEL_10 LEVEL_11 LEVEL_12 LEVEL_13 LEVEL_14 LEVEL_15  ]
"30 C:\Program Files\Microchip\xc8\v2.32\pic\include\c90\math.h
[v _fabs `(d ~T0 @X0 0 ef1`d ]
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
[; ;board.h: 73: enum {
[; ;board.h: 74: CELSIUS,
[; ;board.h: 75: FAHRENHEIT
[; ;board.h: 76: };
[; ;board.h: 78: enum {
[; ;board.h: 79: RAW_MODE,
[; ;board.h: 80: FIL_MODE
[; ;board.h: 81: };
[; ;board.h: 83: enum {
[; ;board.h: 84: TEMP_NOT_COMPENSATION,
[; ;board.h: 85: TEMP_COMPENSATION
[; ;board.h: 86: };
[; ;board.h: 88: enum {
[; ;board.h: 89: USB_NONE,
[; ;board.h: 90: USB_DETACHED,
[; ;board.h: 91: USB_ATTACHED
[; ;board.h: 92: };
[; ;board.h: 94: enum {
[; ;board.h: 95: OFF,
[; ;board.h: 96: ON
[; ;board.h: 97: };
[; ;board.h: 156: void write_command(const uint8_t* buff);
[; ;board.h: 157: uint16_t* get_product_desc();
[; ;filter.h: 16: typedef struct
[; ;filter.h: 17: {
[; ;filter.h: 18: float _err_measure;
[; ;filter.h: 19: float _err_estimate;
[; ;filter.h: 21: float _q_process;
[; ;filter.h: 23: float _current_estimate;
[; ;filter.h: 24: float _last_estimate;
[; ;filter.h: 25: float _kalman_gain;
[; ;filter.h: 26: } s_KalmanFilter_t;
[; ;filter.h: 29: typedef enum {
[; ;filter.h: 30: LEVEL_1 = 1,
[; ;filter.h: 31: LEVEL_2,
[; ;filter.h: 32: LEVEL_3,
[; ;filter.h: 33: LEVEL_4,
[; ;filter.h: 34: LEVEL_5,
[; ;filter.h: 35: LEVEL_6,
[; ;filter.h: 36: LEVEL_7,
[; ;filter.h: 37: LEVEL_8,
[; ;filter.h: 38: LEVEL_9,
[; ;filter.h: 39: LEVEL_10,
[; ;filter.h: 40: LEVEL_11,
[; ;filter.h: 41: LEVEL_12,
[; ;filter.h: 42: LEVEL_13,
[; ;filter.h: 43: LEVEL_14,
[; ;filter.h: 44: LEVEL_15
[; ;filter.h: 45: } e_KalmaFilter_sensitivity;
[; ;filter.h: 56: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea);
[; ;filter.h: 58: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e);
[; ;filter.h: 59: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e);
[; ;filter.h: 60: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj,float q);
[; ;filter.h: 62: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj);
[; ;filter.h: 63: float Kalman_getEstimateError(s_KalmanFilter_t *pObj);
[; ;filter.h: 65: void Set_KamanFilter_Sensitivity(e_KalmaFilter_sensitivity e_level);
"13 filter.c
[v _kalmanFilter `S1 ~T0 @X0 1 e ]
[; ;filter.c: 13: s_KalmanFilter_t kalmanFilter;
"14
[v _e_level `E117 ~T0 @X0 1 e ]
[; ;filter.c: 14: e_KalmaFilter_sensitivity e_level;
"15
[v _g_sensitivity `f ~T0 @X0 1 e ]
[; ;filter.c: 15: float g_sensitivity;
"17
[v _kalman_q_factor `f ~T0 @X0 -> 15 `i s ]
[i _kalman_q_factor
:U ..
"18
-> .0.99 `f
-> .0.8 `f
-> .0.6 `f
-> .0.5 `f
-> .0.3 `f
-> .0.1 `f
-> .0.05 `f
-> .0.01 `f
-> .0.005 `f
-> .0.001 `f
"19
-> .0.0005 `f
-> .0.0001 `f
-> .0.00005 `f
-> .0.00001 `f
-> .0.000001 `f
..
]
[; ;filter.c: 17: static float kalman_q_factor[15] = {
[; ;filter.c: 18: 0.99f, 0.8f, 0.6f, 0.5f, 0.3f, 0.1f, 0.05f, 0.01f, 0.005f,0.001f,
[; ;filter.c: 19: 0.0005f, 0.0001f, 0.00005f, 0.00001f, 0.000001f};
"22
[v _Kalman_updateEstimate `(f ~T0 @X0 1 ef2`*S1`f ]
"23
{
[; ;filter.c: 22: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea)
[; ;filter.c: 23: {
[e :U _Kalman_updateEstimate ]
"22
[v _pObj `*S1 ~T0 @X0 1 r1 ]
[v _mea `f ~T0 @X0 1 r2 ]
"23
[f ]
[; ;filter.c: 25: pObj->_kalman_gain = pObj->_err_estimate/(pObj->_err_estimate + pObj->_err_measure);
"25
[e = . *U _pObj 5 / . *U _pObj 1 + . *U _pObj 1 . *U _pObj 0 ]
[; ;filter.c: 27: pObj->_current_estimate = pObj->_last_estimate + pObj->_kalman_gain * (mea - pObj->_last_estimate);
"27
[e = . *U _pObj 3 + . *U _pObj 4 * . *U _pObj 5 - _mea . *U _pObj 4 ]
[; ;filter.c: 29: pObj->_err_estimate = (1.0 - pObj->_kalman_gain)*pObj->_err_estimate +
[; ;filter.c: 30: fabs(pObj->_last_estimate-pObj->_current_estimate)*pObj->_q_process;
"30
[e = . *U _pObj 1 -> + * - .1.0 -> . *U _pObj 5 `d -> . *U _pObj 1 `d * ( _fabs (1 -> - . *U _pObj 4 . *U _pObj 3 `d -> . *U _pObj 2 `d `f ]
[; ;filter.c: 32: pObj->_last_estimate=pObj->_current_estimate;
"32
[e = . *U _pObj 4 . *U _pObj 3 ]
[; ;filter.c: 34: return pObj->_current_estimate;
"34
[e ) . *U _pObj 3 ]
[e $UE 2  ]
[; ;filter.c: 35: }
"35
[e :UE 2 ]
}
"37
[v _Kalman_setMeasurementError `(v ~T0 @X0 1 ef2`*S1`f ]
"38
{
[; ;filter.c: 37: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e)
[; ;filter.c: 38: {
[e :U _Kalman_setMeasurementError ]
"37
[v _pObj `*S1 ~T0 @X0 1 r1 ]
[v _mea_e `f ~T0 @X0 1 r2 ]
"38
[f ]
[; ;filter.c: 39: pObj->_err_measure=mea_e;
"39
[e = . *U _pObj 0 _mea_e ]
[; ;filter.c: 40: }
"40
[e :UE 3 ]
}
"41
[v _Kalman_setEstimateError `(v ~T0 @X0 1 ef2`*S1`f ]
"42
{
[; ;filter.c: 41: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e)
[; ;filter.c: 42: {
[e :U _Kalman_setEstimateError ]
"41
[v _pObj `*S1 ~T0 @X0 1 r1 ]
[v _est_e `f ~T0 @X0 1 r2 ]
"42
[f ]
[; ;filter.c: 43: pObj->_err_estimate=est_e;
"43
[e = . *U _pObj 1 _est_e ]
[; ;filter.c: 44: }
"44
[e :UE 4 ]
}
"46
[v _Kalman_setProcessNoise `(v ~T0 @X0 1 ef2`*S1`f ]
"47
{
[; ;filter.c: 46: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj, float q)
[; ;filter.c: 47: {
[e :U _Kalman_setProcessNoise ]
"46
[v _pObj `*S1 ~T0 @X0 1 r1 ]
[v _q `f ~T0 @X0 1 r2 ]
"47
[f ]
[; ;filter.c: 48: pObj->_q_process=q;
"48
[e = . *U _pObj 2 _q ]
[; ;filter.c: 49: }
"49
[e :UE 5 ]
}
"51
[v _Kalman_getKalmanGain `(f ~T0 @X0 1 ef1`*S1 ]
"52
{
[; ;filter.c: 51: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj)
[; ;filter.c: 52: {
[e :U _Kalman_getKalmanGain ]
"51
[v _pObj `*S1 ~T0 @X0 1 r1 ]
"52
[f ]
[; ;filter.c: 53: return pObj->_kalman_gain;
"53
[e ) . *U _pObj 5 ]
[e $UE 6  ]
[; ;filter.c: 55: }
"55
[e :UE 6 ]
}
"56
[v _Kalman_getEstimateError `(f ~T0 @X0 1 ef1`*S1 ]
"57
{
[; ;filter.c: 56: float Kalman_getEstimateError(s_KalmanFilter_t *pObj)
[; ;filter.c: 57: {
[e :U _Kalman_getEstimateError ]
"56
[v _pObj `*S1 ~T0 @X0 1 r1 ]
"57
[f ]
[; ;filter.c: 58: return pObj->_err_estimate;
"58
[e ) . *U _pObj 1 ]
[e $UE 7  ]
[; ;filter.c: 59: }
"59
[e :UE 7 ]
}
"61
[v _Set_KamanFilter_Sensitivity `(v ~T0 @X0 1 ef1`E117 ]
"62
{
[; ;filter.c: 61: void Set_KamanFilter_Sensitivity(e_KalmaFilter_sensitivity e_level)
[; ;filter.c: 62: {
[e :U _Set_KamanFilter_Sensitivity ]
[v _e_level `E117 ~T0 @X0 1 r1 ]
[f ]
[; ;filter.c: 63: switch (e_level)
"63
[e $U 10  ]
[; ;filter.c: 64: {
"64
{
[; ;filter.c: 65: case LEVEL_1 : g_sensitivity = 1.0; break;
"65
[e :U 11 ]
[e = _g_sensitivity -> .1.0 `f ]
[e $U 9  ]
[; ;filter.c: 66: case LEVEL_2 : g_sensitivity = 0.9; break;
"66
[e :U 12 ]
[e = _g_sensitivity -> .0.9 `f ]
[e $U 9  ]
[; ;filter.c: 67: case LEVEL_3 : g_sensitivity = 0.8; break;
"67
[e :U 13 ]
[e = _g_sensitivity -> .0.8 `f ]
[e $U 9  ]
[; ;filter.c: 68: case LEVEL_4 : g_sensitivity = 0.7; break;
"68
[e :U 14 ]
[e = _g_sensitivity -> .0.7 `f ]
[e $U 9  ]
[; ;filter.c: 69: case LEVEL_5 : g_sensitivity = 0.6; break;
"69
[e :U 15 ]
[e = _g_sensitivity -> .0.6 `f ]
[e $U 9  ]
[; ;filter.c: 70: case LEVEL_6 : g_sensitivity = 0.5; break;
"70
[e :U 16 ]
[e = _g_sensitivity -> .0.5 `f ]
[e $U 9  ]
[; ;filter.c: 71: case LEVEL_7 : g_sensitivity = 0.4; break;
"71
[e :U 17 ]
[e = _g_sensitivity -> .0.4 `f ]
[e $U 9  ]
[; ;filter.c: 72: case LEVEL_8 : g_sensitivity = 0.35; break;
"72
[e :U 18 ]
[e = _g_sensitivity -> .0.35 `f ]
[e $U 9  ]
[; ;filter.c: 73: case LEVEL_9 : g_sensitivity = 0.3; break;
"73
[e :U 19 ]
[e = _g_sensitivity -> .0.3 `f ]
[e $U 9  ]
[; ;filter.c: 74: case LEVEL_10 : g_sensitivity = 0.25; break;
"74
[e :U 20 ]
[e = _g_sensitivity -> .0.25 `f ]
[e $U 9  ]
[; ;filter.c: 75: case LEVEL_11 : g_sensitivity = 0.2; break;
"75
[e :U 21 ]
[e = _g_sensitivity -> .0.2 `f ]
[e $U 9  ]
[; ;filter.c: 76: case LEVEL_12 : g_sensitivity = 0.1; break;
"76
[e :U 22 ]
[e = _g_sensitivity -> .0.1 `f ]
[e $U 9  ]
[; ;filter.c: 77: case LEVEL_13 : g_sensitivity = 0.01; break;
"77
[e :U 23 ]
[e = _g_sensitivity -> .0.01 `f ]
[e $U 9  ]
[; ;filter.c: 78: case LEVEL_14 : g_sensitivity = 0.001; break;
"78
[e :U 24 ]
[e = _g_sensitivity -> .0.001 `f ]
[e $U 9  ]
[; ;filter.c: 79: case LEVEL_15 : g_sensitivity = 0.0001; break;
"79
[e :U 25 ]
[e = _g_sensitivity -> .0.0001 `f ]
[e $U 9  ]
[; ;filter.c: 80: default: g_sensitivity = 0.1; break;
"80
[e :U 26 ]
[e = _g_sensitivity -> .0.1 `f ]
[e $U 9  ]
"81
}
[; ;filter.c: 81: }
[e $U 9  ]
"63
[e :U 10 ]
[e [\ _e_level , $ . `E117 0 11
 , $ . `E117 1 12
 , $ . `E117 2 13
 , $ . `E117 3 14
 , $ . `E117 4 15
 , $ . `E117 5 16
 , $ . `E117 6 17
 , $ . `E117 7 18
 , $ . `E117 8 19
 , $ . `E117 9 20
 , $ . `E117 10 21
 , $ . `E117 11 22
 , $ . `E117 12 23
 , $ . `E117 13 24
 , $ . `E117 14 25
 26 ]
"81
[e :U 9 ]
[; ;filter.c: 82: Kalman_setProcessNoise(&kalmanFilter,g_sensitivity);
"82
[e ( _Kalman_setProcessNoise (2 , &U _kalmanFilter _g_sensitivity ]
[; ;filter.c: 83: }
"83
[e :UE 8 ]
}
