Version 3.2 HI-TECH Software Intermediate Code
"14 app_linear_regression.h
[s S1 `f -> 10 `i `f -> 10 `i `uc 1 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 ]
[n S1 . x y position time_cnt sum_x sum_x2 sum_y sum_xy slope offset ]
"53 C:\Program Files\Microchip\xc8\v2.32\pic\include\c90\math.h
[v _fmod `(d ~T0 @X0 0 ef2`d`d ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;xc8\pic\include\__size_t.h: 4: typedef unsigned size_t;
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
[; ;app_linear_regression.h: 14: typedef struct {
[; ;app_linear_regression.h: 17: float x[10];
[; ;app_linear_regression.h: 18: float y[10];
[; ;app_linear_regression.h: 24: uint8_t position;
[; ;app_linear_regression.h: 25: float time_cnt;
[; ;app_linear_regression.h: 27: float sum_x;
[; ;app_linear_regression.h: 28: float sum_x2;
[; ;app_linear_regression.h: 29: float sum_y;
[; ;app_linear_regression.h: 30: float sum_xy;
[; ;app_linear_regression.h: 32: float slope;
[; ;app_linear_regression.h: 33: float offset;
[; ;app_linear_regression.h: 39: } s_Linear_reg;
[; ;app_linear_regression.h: 47: void Linear_regression_init(s_Linear_reg* p);
[; ;app_linear_regression.h: 48: void Linear_regression(s_Linear_reg* p, float uVoltage);
[; ;app_linear_regression.c: 17: static float slope_average(s_Linear_reg* p, float slope);
"19 app_linear_regression.c
[v _g_time_cnt `Vuc ~T0 @X0 1 e ]
[; ;app_linear_regression.c: 19: volatile uint8_t g_time_cnt;
"22
[v _Linear_regression_init `(v ~T0 @X0 1 ef1`*S1 ]
"23
{
[; ;app_linear_regression.c: 22: void Linear_regression_init(s_Linear_reg* p)
[; ;app_linear_regression.c: 23: {
[e :U _Linear_regression_init ]
"22
[v _p `*S1 ~T0 @X0 1 r1 ]
"23
[f ]
"24
[v _index `uc ~T0 @X0 1 a ]
[; ;app_linear_regression.c: 24: uint8_t index;
[; ;app_linear_regression.c: 27: for (index = 0; index < 10; index++) {
"27
{
[e = _index -> -> 0 `i `uc ]
[e $ < -> _index `i -> 10 `i 3  ]
[e $U 4  ]
[e :U 3 ]
{
[; ;app_linear_regression.c: 28: p->x[index] = 0.0f;
"28
[e = *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux -> .0.0 `f ]
[; ;app_linear_regression.c: 29: p->y[index] = 0.0f;
"29
[e = *U + &U . *U _p 1 * -> _index `ux -> -> # *U &U . *U _p 1 `ui `ux -> .0.0 `f ]
"30
}
"27
[e ++ _index -> -> 1 `i `uc ]
[e $ < -> _index `i -> 10 `i 3  ]
[e :U 4 ]
"30
}
[; ;app_linear_regression.c: 30: }
[; ;app_linear_regression.c: 38: p->position = 0;
"38
[e = . *U _p 2 -> -> 0 `i `uc ]
[; ;app_linear_regression.c: 39: p->time_cnt = 0.0f;
"39
[e = . *U _p 3 -> .0.0 `f ]
[; ;app_linear_regression.c: 41: p->sum_x = 0.0f;
"41
[e = . *U _p 4 -> .0.0 `f ]
[; ;app_linear_regression.c: 42: p->sum_y = 0.0f;
"42
[e = . *U _p 6 -> .0.0 `f ]
[; ;app_linear_regression.c: 43: p->sum_x2 = 0.0f;
"43
[e = . *U _p 5 -> .0.0 `f ]
[; ;app_linear_regression.c: 44: p->sum_xy = 0.0f;
"44
[e = . *U _p 7 -> .0.0 `f ]
[; ;app_linear_regression.c: 45: p->slope = 0.0f;
"45
[e = . *U _p 8 -> .0.0 `f ]
[; ;app_linear_regression.c: 46: p->offset = 0.0f;
"46
[e = . *U _p 9 -> .0.0 `f ]
[; ;app_linear_regression.c: 47: }
"47
[e :UE 2 ]
}
"58
[v _Linear_regression `(v ~T0 @X0 1 ef2`*S1`f ]
"59
{
[; ;app_linear_regression.c: 58: void Linear_regression(s_Linear_reg* p, float uVoltage)
[; ;app_linear_regression.c: 59: {
[e :U _Linear_regression ]
"58
[v _p `*S1 ~T0 @X0 1 r1 ]
[v _uVoltage `f ~T0 @X0 1 r2 ]
"59
[f ]
"60
[v _index `uc ~T0 @X0 1 a ]
"61
[v _slp `f ~T0 @X0 1 a ]
[; ;app_linear_regression.c: 60: uint8_t index;
[; ;app_linear_regression.c: 61: float slp;
[; ;app_linear_regression.c: 63: p->sum_x = 0.0f;
"63
[e = . *U _p 4 -> .0.0 `f ]
[; ;app_linear_regression.c: 64: p->sum_y = 0.0f;
"64
[e = . *U _p 6 -> .0.0 `f ]
[; ;app_linear_regression.c: 65: p->sum_x2 = 0.0f;
"65
[e = . *U _p 5 -> .0.0 `f ]
[; ;app_linear_regression.c: 66: p->sum_xy = 0.0f;
"66
[e = . *U _p 7 -> .0.0 `f ]
[; ;app_linear_regression.c: 69: if (p->time_cnt != 60) {
"69
[e $ ! != . *U _p 3 -> -> 60 `i `f 7  ]
{
[; ;app_linear_regression.c: 70: p->time_cnt = p->time_cnt + 1.0f;
"70
[e = . *U _p 3 + . *U _p 3 -> .1.0 `f ]
[; ;app_linear_regression.c: 71: if ( fmod(p->time_cnt, (float)(60/10)) == 0.0f ) {
"71
[e $ ! == ( _fmod (2 , -> . *U _p 3 `d -> -> / -> 60 `i -> 10 `i `f `d -> -> .0.0 `f `d 8  ]
{
[; ;app_linear_regression.c: 72: p->x[p->position] = p->time_cnt;
"72
[e = *U + &U . *U _p 0 * -> . *U _p 2 `ux -> -> # *U &U . *U _p 0 `ui `ux . *U _p 3 ]
[; ;app_linear_regression.c: 73: p->y[p->position] = uVoltage;
"73
[e = *U + &U . *U _p 1 * -> . *U _p 2 `ux -> -> # *U &U . *U _p 1 `ui `ux _uVoltage ]
[; ;app_linear_regression.c: 74: p->position++;
"74
[e ++ . *U _p 2 -> -> 1 `i `uc ]
"75
}
[e :U 8 ]
"76
}
[; ;app_linear_regression.c: 75: }
[; ;app_linear_regression.c: 76: } else {
[e $U 9  ]
[e :U 7 ]
{
[; ;app_linear_regression.c: 77: g_time_cnt++;
"77
[e ++ _g_time_cnt -> -> 1 `i `uc ]
[; ;app_linear_regression.c: 78: if (g_time_cnt == 60/10) {
"78
[e $ ! == -> _g_time_cnt `i / -> 60 `i -> 10 `i 10  ]
{
[; ;app_linear_regression.c: 79: g_time_cnt = 0;
"79
[e = _g_time_cnt -> -> 0 `i `uc ]
[; ;app_linear_regression.c: 80: for (index = 0; index < 10 -1; index++) {
"80
{
[e = _index -> -> 0 `i `uc ]
[e $ < -> _index `i - -> 10 `i -> 1 `i 11  ]
[e $U 12  ]
[e :U 11 ]
{
[; ;app_linear_regression.c: 81: p->x[index] = (p->x[index +1] - (float)(60/10));
"81
[e = *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux - *U + &U . *U _p 0 * -> -> + -> _index `i -> 1 `i `ui `ux -> -> # *U &U . *U _p 0 `ui `ux -> / -> 60 `i -> 10 `i `f ]
[; ;app_linear_regression.c: 82: p->y[index] = p->y[index +1];
"82
[e = *U + &U . *U _p 1 * -> _index `ux -> -> # *U &U . *U _p 1 `ui `ux *U + &U . *U _p 1 * -> -> + -> _index `i -> 1 `i `ui `ux -> -> # *U &U . *U _p 1 `ui `ux ]
"83
}
"80
[e ++ _index -> -> 1 `i `uc ]
[e $ < -> _index `i - -> 10 `i -> 1 `i 11  ]
[e :U 12 ]
"83
}
[; ;app_linear_regression.c: 83: }
[; ;app_linear_regression.c: 84: p->x[10 -1] = (float)60;
"84
[e = *U + &U . *U _p 0 * -> -> - -> 10 `i -> 1 `i `ui `ux -> -> # *U &U . *U _p 0 `ui `ux -> -> 60 `i `f ]
[; ;app_linear_regression.c: 85: p->y[10 -1] = uVoltage;
"85
[e = *U + &U . *U _p 1 * -> -> - -> 10 `i -> 1 `i `ui `ux -> -> # *U &U . *U _p 1 `ui `ux _uVoltage ]
"86
}
[e :U 10 ]
"87
}
[e :U 9 ]
[; ;app_linear_regression.c: 86: }
[; ;app_linear_regression.c: 87: }
[; ;app_linear_regression.c: 90: for (index = 0; index < 10; index++) {
"90
{
[e = _index -> -> 0 `i `uc ]
[e $ < -> _index `i -> 10 `i 14  ]
[e $U 15  ]
[e :U 14 ]
{
[; ;app_linear_regression.c: 91: p->sum_x += p->x[index];
"91
[e =+ . *U _p 4 *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux ]
[; ;app_linear_regression.c: 92: p->sum_y += p->y[index];
"92
[e =+ . *U _p 6 *U + &U . *U _p 1 * -> _index `ux -> -> # *U &U . *U _p 1 `ui `ux ]
[; ;app_linear_regression.c: 93: p->sum_x2 += p->x[index] * p->x[index];
"93
[e =+ . *U _p 5 * *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux ]
[; ;app_linear_regression.c: 94: p->sum_xy += p->x[index] * p->y[index];
"94
[e =+ . *U _p 7 * *U + &U . *U _p 0 * -> _index `ux -> -> # *U &U . *U _p 0 `ui `ux *U + &U . *U _p 1 * -> _index `ux -> -> # *U &U . *U _p 1 `ui `ux ]
"95
}
"90
[e ++ _index -> -> 1 `i `uc ]
[e $ < -> _index `i -> 10 `i 14  ]
[e :U 15 ]
"95
}
[; ;app_linear_regression.c: 95: }
[; ;app_linear_regression.c: 98: p->slope = (10*p->sum_xy - p->sum_x*p->sum_y) / (10*p->sum_x2 - p->sum_x*p->sum_x);
"98
[e = . *U _p 8 / - * -> -> 10 `i `f . *U _p 7 * . *U _p 4 . *U _p 6 - * -> -> 10 `i `f . *U _p 5 * . *U _p 4 . *U _p 4 ]
[; ;app_linear_regression.c: 99: p->offset = (p->sum_y - p->slope*p->sum_x) / 10;
"99
[e = . *U _p 9 / - . *U _p 6 * . *U _p 8 . *U _p 4 -> -> 10 `i `f ]
[; ;app_linear_regression.c: 100: }
"100
[e :UE 6 ]
}
