Version 3.2 HI-TECH Software Intermediate Code
"15 filter.h
[s S1 `uc 1 `f 1 ]
[n S1 . hasInit prevValue ]
"23
[s S2 `f 1 `f 1 `f 1 `f 1 `f 1 `f 1 ]
[n S2 . _err_measure _err_estimate _q_process _current_estimate _last_estimate _kalman_gain ]
"30 C:\Program Files\Microchip\xc8\v2.32\pic\include\c90\math.h
[v _fabs `(d ~T0 @X0 0 ef1`d ]
[; ;stdbool.h: 15: typedef unsigned char bool;
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef __int24 int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 52: typedef unsigned char uint8_t;
[; ;stdint.h: 58: typedef unsigned int uint16_t;
[; ;stdint.h: 65: typedef __uint24 uint24_t;
[; ;stdint.h: 72: typedef unsigned long int uint32_t;
[; ;stdint.h: 88: typedef signed char int_least8_t;
[; ;stdint.h: 96: typedef signed int int_least16_t;
[; ;stdint.h: 109: typedef __int24 int_least24_t;
[; ;stdint.h: 118: typedef signed long int int_least32_t;
[; ;stdint.h: 136: typedef unsigned char uint_least8_t;
[; ;stdint.h: 143: typedef unsigned int uint_least16_t;
[; ;stdint.h: 154: typedef __uint24 uint_least24_t;
[; ;stdint.h: 162: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 181: typedef signed char int_fast8_t;
[; ;stdint.h: 188: typedef signed int int_fast16_t;
[; ;stdint.h: 200: typedef __int24 int_fast24_t;
[; ;stdint.h: 208: typedef signed long int int_fast32_t;
[; ;stdint.h: 224: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 230: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 240: typedef __uint24 uint_fast24_t;
[; ;stdint.h: 247: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 268: typedef int32_t intmax_t;
[; ;stdint.h: 282: typedef uint32_t uintmax_t;
[; ;stdint.h: 289: typedef int16_t intptr_t;
[; ;stdint.h: 294: typedef uint16_t uintptr_t;
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
[; ;board.h: 51: enum {
[; ;board.h: 52: SENSING_OFF,
[; ;board.h: 53: SENSING_ON
[; ;board.h: 54: };
[; ;board.h: 73: enum {
[; ;board.h: 74: CELSIUS,
[; ;board.h: 75: FAHRENHEIT
[; ;board.h: 76: };
[; ;board.h: 78: enum {
[; ;board.h: 79: RAW_MODE,
[; ;board.h: 80: FIL_MODE
[; ;board.h: 81: };
[; ;board.h: 83: enum {
[; ;board.h: 84: TEMP_NOT_COMPENSATION,
[; ;board.h: 85: TEMP_COMPENSATION
[; ;board.h: 86: };
[; ;board.h: 88: enum {
[; ;board.h: 89: NONE,
[; ;board.h: 90: NH3_100,
[; ;board.h: 91: H2S_50,
[; ;board.h: 92: EO,
[; ;board.h: 93: NH3_1000
[; ;board.h: 94: };
[; ;board.h: 96: enum {
[; ;board.h: 97: MODBUS_SLAVE_MODE,
[; ;board.h: 98: MODBUS_MASTER_MODE
[; ;board.h: 99: };
[; ;board.h: 221: void write_command(const uint8_t* buff);
[; ;board.h: 222: uint16_t* get_product_desc();
[; ;filter.h: 14: typedef struct
[; ;filter.h: 15: {
[; ;filter.h: 16: bool hasInit;
[; ;filter.h: 17: float prevValue;
[; ;filter.h: 19: } s_EwmaFilter_t;
[; ;filter.h: 22: typedef struct
[; ;filter.h: 23: {
[; ;filter.h: 24: float _err_measure;
[; ;filter.h: 25: float _err_estimate;
[; ;filter.h: 27: float _q_process;
[; ;filter.h: 29: float _current_estimate;
[; ;filter.h: 30: float _last_estimate;
[; ;filter.h: 31: float _kalman_gain;
[; ;filter.h: 32: } s_KalmanFilter_t;
[; ;filter.h: 34: typedef struct
[; ;filter.h: 35: {
[; ;filter.h: 36: char hasInit;
[; ;filter.h: 37: s_KalmanFilter_t kalman;
[; ;filter.h: 38: } s_KalmanApp_t;
[; ;filter.h: 69: float ewmaFilter_get(s_EwmaFilter_t* ewmaFilter, float inputValue, uint8_t sensitivity);
[; ;filter.h: 73: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea);
[; ;filter.h: 75: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e);
[; ;filter.h: 76: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e);
[; ;filter.h: 77: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj,float q);
[; ;filter.h: 79: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj);
[; ;filter.h: 80: float Kalman_getEstimateError(s_KalmanFilter_t *pObj);
"22 filter.c
[v _ewmaFilter_get `(f ~T0 @X0 1 ef3`*S1`f`uc ]
"23
{
[; ;filter.c: 22: float ewmaFilter_get(s_EwmaFilter_t* ewmaFilter, float inputValue, uint8_t sensitivity)
[; ;filter.c: 23: {
[e :U _ewmaFilter_get ]
"22
[v _ewmaFilter `*S1 ~T0 @X0 1 r1 ]
[v _inputValue `f ~T0 @X0 1 r2 ]
[v _sensitivity `uc ~T0 @X0 1 r3 ]
"23
[f ]
"24
[v _retval `f ~T0 @X0 1 a ]
[v _alpha `f ~T0 @X0 1 a ]
"25
[v F155 `f ~T0 @X0 -> 15 `i s filter_alpha ]
[i F155
:U ..
"26
-> .1.0 `f
-> .0.9 `f
-> .0.85 `f
-> .0.8 `f
-> .0.7 `f
-> .0.6 `f
-> .0.5 `f
-> .0.4 `f
-> .0.3 `f
-> .0.25 `f
"27
-> .0.2 `f
-> .0.15 `f
-> .0.1 `f
-> .0.05 `f
"28
-> .0.02 `f
..
]
[; ;filter.c: 24: float retval, alpha;
[; ;filter.c: 25: static float filter_alpha[15] = {
[; ;filter.c: 26: 1.0f, 0.9f, 0.85f, 0.8f, 0.7f, 0.6f, 0.5f, 0.4f, 0.3f, 0.25f,
[; ;filter.c: 27: 0.2f, 0.15f, 0.1f, 0.05f, 0.02f
[; ;filter.c: 28: };
[; ;filter.c: 30: if (ewmaFilter->hasInit == 0) {
"30
[e $ ! == -> . *U _ewmaFilter 0 `i -> 0 `i 5  ]
{
[; ;filter.c: 31: ewmaFilter->prevValue = inputValue;
"31
[e = . *U _ewmaFilter 1 _inputValue ]
[; ;filter.c: 32: ewmaFilter->hasInit = 1;
"32
[e = . *U _ewmaFilter 0 -> -> 1 `i `uc ]
[; ;filter.c: 33: return inputValue;
"33
[e ) _inputValue ]
[e $UE 4  ]
"34
}
[e :U 5 ]
"36
[v _idx `uc ~T0 @X0 1 a ]
[; ;filter.c: 34: }
[; ;filter.c: 36: uint8_t idx = sensitivity - 1;
[e = _idx -> - -> _sensitivity `i -> 1 `i `uc ]
[; ;filter.c: 37: if (idx < 0) idx = 0;
"37
[e $ ! < -> _idx `i -> 0 `i 6  ]
[e = _idx -> -> 0 `i `uc ]
[e :U 6 ]
[; ;filter.c: 38: if (idx > 14) idx = 14;
"38
[e $ ! > -> _idx `i -> 14 `i 7  ]
[e = _idx -> -> 14 `i `uc ]
[e :U 7 ]
[; ;filter.c: 39: alpha = filter_alpha[idx];
"39
[e = _alpha *U + &U F155 * -> _idx `ux -> -> # *U &U F155 `ui `ux ]
[; ;filter.c: 41: retval = ((1 - alpha) * ewmaFilter->prevValue) + (alpha * inputValue);
"41
[e = _retval + * - -> -> 1 `i `f _alpha . *U _ewmaFilter 1 * _alpha _inputValue ]
[; ;filter.c: 43: ewmaFilter->prevValue = retval;
"43
[e = . *U _ewmaFilter 1 _retval ]
[; ;filter.c: 45: return retval;
"45
[e ) _retval ]
[e $UE 4  ]
[; ;filter.c: 46: }
"46
[e :UE 4 ]
}
"53
[v _kalman_q_factor `f ~T0 @X0 -> 15 `i s ]
[i _kalman_q_factor
:U ..
"54
-> .0.99 `f
-> .0.8 `f
-> .0.6 `f
-> .0.5 `f
-> .0.3 `f
-> .0.1 `f
-> .0.05 `f
-> .0.01 `f
-> .0.005 `f
-> .0.001 `f
"55
-> .0.0005 `f
-> .0.0001 `f
-> .0.00005 `f
-> .0.00001 `f
-> .0.000001 `f
..
]
[; ;filter.c: 53: static float kalman_q_factor[15] = {
[; ;filter.c: 54: 0.99f, 0.8f, 0.6f, 0.5f, 0.3f, 0.1f, 0.05f, 0.01f, 0.005f,0.001f,
[; ;filter.c: 55: 0.0005f, 0.0001f, 0.00005f, 0.00001f, 0.000001f};
"144
[v _Kalman_updateEstimate `(f ~T0 @X0 1 ef2`*S2`f ]
"145
{
[; ;filter.c: 144: float Kalman_updateEstimate(s_KalmanFilter_t *pObj,float mea)
[; ;filter.c: 145: {
[e :U _Kalman_updateEstimate ]
"144
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _mea `f ~T0 @X0 1 r2 ]
"145
[f ]
[; ;filter.c: 147: pObj->_kalman_gain = pObj->_err_estimate/(pObj->_err_estimate + pObj->_err_measure);
"147
[e = . *U _pObj 5 / . *U _pObj 1 + . *U _pObj 1 . *U _pObj 0 ]
[; ;filter.c: 149: pObj->_current_estimate = pObj->_last_estimate + pObj->_kalman_gain * (mea - pObj->_last_estimate);
"149
[e = . *U _pObj 3 + . *U _pObj 4 * . *U _pObj 5 - _mea . *U _pObj 4 ]
[; ;filter.c: 151: pObj->_err_estimate = (1.0 - pObj->_kalman_gain)*pObj->_err_estimate +
[; ;filter.c: 152: fabs(pObj->_last_estimate-pObj->_current_estimate)*pObj->_q_process;
"152
[e = . *U _pObj 1 -> + * - .1.0 -> . *U _pObj 5 `d -> . *U _pObj 1 `d * ( _fabs (1 -> - . *U _pObj 4 . *U _pObj 3 `d -> . *U _pObj 2 `d `f ]
[; ;filter.c: 154: pObj->_last_estimate=pObj->_current_estimate;
"154
[e = . *U _pObj 4 . *U _pObj 3 ]
[; ;filter.c: 156: return pObj->_current_estimate;
"156
[e ) . *U _pObj 3 ]
[e $UE 8  ]
[; ;filter.c: 157: }
"157
[e :UE 8 ]
}
"159
[v _Kalman_setMeasurementError `(v ~T0 @X0 1 ef2`*S2`f ]
"160
{
[; ;filter.c: 159: void Kalman_setMeasurementError(s_KalmanFilter_t *pObj,float mea_e)
[; ;filter.c: 160: {
[e :U _Kalman_setMeasurementError ]
"159
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _mea_e `f ~T0 @X0 1 r2 ]
"160
[f ]
[; ;filter.c: 161: pObj->_err_measure=mea_e;
"161
[e = . *U _pObj 0 _mea_e ]
[; ;filter.c: 162: }
"162
[e :UE 9 ]
}
"163
[v _Kalman_setEstimateError `(v ~T0 @X0 1 ef2`*S2`f ]
"164
{
[; ;filter.c: 163: void Kalman_setEstimateError(s_KalmanFilter_t *pObj,float est_e)
[; ;filter.c: 164: {
[e :U _Kalman_setEstimateError ]
"163
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _est_e `f ~T0 @X0 1 r2 ]
"164
[f ]
[; ;filter.c: 165: pObj->_err_estimate=est_e;
"165
[e = . *U _pObj 1 _est_e ]
[; ;filter.c: 166: }
"166
[e :UE 10 ]
}
"168
[v _Kalman_setProcessNoise `(v ~T0 @X0 1 ef2`*S2`f ]
"169
{
[; ;filter.c: 168: void Kalman_setProcessNoise(s_KalmanFilter_t *pObj,float q)
[; ;filter.c: 169: {
[e :U _Kalman_setProcessNoise ]
"168
[v _pObj `*S2 ~T0 @X0 1 r1 ]
[v _q `f ~T0 @X0 1 r2 ]
"169
[f ]
[; ;filter.c: 170: pObj->_q_process=q;
"170
[e = . *U _pObj 2 _q ]
[; ;filter.c: 171: }
"171
[e :UE 11 ]
}
"173
[v _Kalman_getKalmanGain `(f ~T0 @X0 1 ef1`*S2 ]
"174
{
[; ;filter.c: 173: float Kalman_getKalmanGain(s_KalmanFilter_t *pObj)
[; ;filter.c: 174: {
[e :U _Kalman_getKalmanGain ]
"173
[v _pObj `*S2 ~T0 @X0 1 r1 ]
"174
[f ]
[; ;filter.c: 175: return pObj->_kalman_gain;
"175
[e ) . *U _pObj 5 ]
[e $UE 12  ]
[; ;filter.c: 177: }
"177
[e :UE 12 ]
}
"178
[v _Kalman_getEstimateError `(f ~T0 @X0 1 ef1`*S2 ]
"179
{
[; ;filter.c: 178: float Kalman_getEstimateError(s_KalmanFilter_t *pObj)
[; ;filter.c: 179: {
[e :U _Kalman_getEstimateError ]
"178
[v _pObj `*S2 ~T0 @X0 1 r1 ]
"179
[f ]
[; ;filter.c: 180: return pObj->_err_estimate;
"180
[e ) . *U _pObj 1 ]
[e $UE 13  ]
[; ;filter.c: 181: }
"181
[e :UE 13 ]
}
